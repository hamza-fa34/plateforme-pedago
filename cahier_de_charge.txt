===========================================
CAHIER DES CHARGES - PLATEFORME PÉDAGOGIQUE
===========================================

Version : 2.0
Date : 2025
Statut : Fonctionnel avec améliorations en cours

---

1. PRÉSENTATION DU PROJET
==========================

1.1 Objectif
------------
Développer une plateforme web éducative moderne permettant aux enseignants de partager des ressources pédagogiques et aux étudiants de les consulter, rechercher et organiser selon leurs besoins. La plateforme intègre des fonctionnalités avancées comme l'extraction automatique de mots-clés, les recommandations personnalisées et un système de notifications.

1.2 Public cible
----------------
- Enseignants : pour partager et organiser leurs ressources pédagogiques
- Étudiants : pour rechercher, consulter et organiser les ressources
- Administrateurs : pour gérer la plateforme et les utilisateurs

1.3 Technologies utilisées
--------------------------
- Backend : Django 4.2+ (Python)
- Base de données : PostgreSQL
- Cache : Redis
- Frontend : HTML5, CSS3, JavaScript (Vanilla)
- Conteneurisation : Docker & Docker Compose
- Serveur : Gunicorn
- Extraction de mots-clés : YAKE (Yet Another Keyword Extractor)

---

2. FONCTIONNALITÉS IMPLÉMENTÉES
================================

2.1 Système d'authentification et gestion des comptes
-----------------------------------------------------
✅ **Fonctionnalités réalisées :**
- Inscription avec validation des données
- Connexion sécurisée avec gestion des sessions
- Déconnexion
- Récupération de mot de passe oublié
- Gestion des rôles : Étudiant, Enseignant, Administrateur
- Redirection automatique selon le rôle utilisateur
- Sécurité : validation CSRF, protection contre les attaques

2.2 Espace Enseignant
---------------------
✅ **Fonctionnalités réalisées :**
- Tableau de bord personnel avec statistiques
- Upload de ressources pédagogiques (PDF, DOC, PPT, TXT, ZIP, RAR)
- Classement des ressources avec métadonnées :
  * Titre de la ressource
  * Matière enseignée
  * Niveau d'études
  * Type de ressource (cours, exercice, évaluation, etc.)
- Extraction automatique de mots-clés sur les fichiers PDF
- Gestion des permissions (ressources publiques/privées)
- Recherche et filtrage de ses propres ressources
- Suppression de ressources
- Téléchargement de ressources
- Modification des métadonnées des ressources

2.3 Espace Étudiant
-------------------
✅ **Fonctionnalités réalisées :**
- Tableau de bord personnel
- Recherche avancée de ressources :
  * Par nom de fichier
  * Par mots-clés extraits
  * Par matière
  * Par niveau d'études
  * Par type de ressource
- Consultation et téléchargement de ressources publiques
- Système de favoris (ajout/suppression)
- Liste personnelle de favoris
- Ressources "trending" (les plus consultées)
- Historique de consultation (ResourceView)
- Recommandations personnalisées basées sur :
  * Historique de consultation
  * Ressources en favoris
  * Mots-clés des ressources consultées
  * Matière, niveau et type de ressources
- Notifications pour nouvelles recommandations

2.4 Système de notifications
---------------------------
✅ **Fonctionnalités réalisées :**
- Modèle de données pour les notifications
- Page dédiée aux notifications
- Badge de notifications non lues dans le header
- Génération automatique lors d'événements :
  * Upload de nouvelle ressource publique
  * Nouvelle recommandation personnalisée
- Marquage automatique comme "lues"

2.5 Fonctionnalités transverses
------------------------------
✅ **Fonctionnalités réalisées :**
- Gestion des erreurs personnalisées (403, 404, CSRF)
- Sécurité et permissions par rôle
- Gestion des fichiers statiques et médias
- Interface d'administration Django
- Configuration avancée (PostgreSQL, Redis)
- Dockerisation complète
- Interface responsive et moderne

---

3. ARCHITECTURE TECHNIQUE
=========================

3.1 Structure du projet
----------------------
```
plateforme-pedago/
├── login/                 # Authentification et gestion des comptes
├── studenthome/          # Espace étudiant
├── teacherhome/          # Espace enseignant
├── no_access/           # Gestion des erreurs d'accès
├── not_found/           # Gestion des erreurs 404
├── server/              # Configuration principale
├── templates/           # Templates globaux
├── staticfiles/         # Fichiers statiques collectés
├── media/              # Fichiers uploadés
├── requirements.txt     # Dépendances Python
├── Dockerfile          # Image Docker
├── docker-compose.yml  # Orchestration des services
└── env.example.txt     # Variables d'environnement
```

3.2 Modèles de données
----------------------
- **UserProfile** : Extension du modèle User avec type d'utilisateur
- **Resource** : Ressources pédagogiques avec métadonnées
- **ResourceView** : Historique des consultations
- **Favorite** : Système de favoris
- **Notification** : Système de notifications

3.3 Sécurité
------------
- Authentification obligatoire pour les espaces protégés
- Validation CSRF sur toutes les requêtes POST
- Gestion des permissions par rôle
- Protection contre les attaques XSS et CSRF
- Validation des fichiers uploadés

---

4. FONCTIONNALITÉS AVANCÉES
============================

4.1 Extraction automatique de mots-clés
--------------------------------------
- Utilisation de YAKE (Yet Another Keyword Extractor)
- Extraction sur les fichiers PDF
- Stockage des mots-clés pour la recherche
- Amélioration de la pertinence des recommandations

4.2 Recommandations personnalisées
---------------------------------
- Algorithme basé sur l'historique de consultation
- Analyse des ressources en favoris
- Correspondance par mots-clés
- Prise en compte des préférences (matière, niveau, type)
- Génération automatique de nouvelles recommandations

4.3 Système de trending
-----------------------
- Calcul des ressources les plus consultées
- Période de 7 jours pour le calcul
- Affichage dans l'espace étudiant
- Mise à jour automatique

---

5. INTERFACE UTILISATEUR
========================

5.1 Design et ergonomie
-----------------------
- Interface moderne et responsive
- Palette de couleurs cohérente
- Navigation intuitive
- Adaptation mobile et desktop
- Feedback visuel pour les actions utilisateur

5.2 Fonctionnalités UI
---------------------
- Recherche en temps réel
- Filtres avancés
- Système de favoris visuel (cœur)
- Badges de notifications
- Messages d'erreur personnalisés
- Loading states pour les actions

---

6. DÉPLOIEMENT ET INFRASTRUCTURE
================================

6.1 Conteneurisation
--------------------
- Dockerfile pour l'application
- Docker Compose pour l'orchestration
- Services : web, base de données, cache
- Variables d'environnement sécurisées

6.2 Configuration de production
-----------------------------
- Serveur Gunicorn
- Base de données PostgreSQL
- Cache Redis
- Gestion des fichiers statiques
- Configuration HTTPS (à implémenter)

---

7. FONCTIONNALITÉS FUTURES (OPTIONNELLES)
==========================================

7.1 Améliorations possibles
--------------------------
- API REST pour intégration externe
- Système de commentaires sur les ressources
- Partage de ressources entre enseignants
- Analytics et statistiques d'usage
- Export de données (CSV, Excel)
- Intégration avec des LMS externes
- Système de tags personnalisés
- Notifications par email
- Mode hors-ligne pour certaines fonctionnalités

7.2 Optimisations techniques
---------------------------
- Mise en cache des requêtes fréquentes
- Optimisation des requêtes de base de données
- Compression des fichiers statiques
- CDN pour les fichiers statiques
- Monitoring et logging avancés

---

8. TESTS ET QUALITÉ
===================

8.1 Tests à implémenter
----------------------
- Tests unitaires pour les modèles
- Tests d'intégration pour les vues
- Tests de sécurité
- Tests de performance
- Tests d'interface utilisateur

8.2 Qualité du code
-------------------
- Documentation du code
- Standards de codage (PEP 8)
- Gestion des erreurs
- Logs structurés

---

9. MAINTENANCE ET ÉVOLUTION
===========================

9.1 Monitoring
--------------
- Surveillance des performances
- Gestion des erreurs
- Métriques d'utilisation
- Alertes automatiques

9.2 Évolutions
--------------
- Mises à jour de sécurité
- Nouvelles fonctionnalités
- Optimisations continues
- Support utilisateur

---

10. CONCLUSION
==============

La plateforme pédagogique est actuellement **fonctionnelle** avec toutes les fonctionnalités principales implémentées. Le système respecte les bonnes pratiques de développement web et offre une expérience utilisateur moderne et intuitive.

**Points forts :**
- Architecture modulaire et maintenable
- Sécurité robuste
- Interface utilisateur moderne
- Fonctionnalités avancées (recommandations, notifications)
- Déploiement conteneurisé

**Prochaines étapes recommandées :**
1. Implémentation des tests automatisés
2. Documentation complète
3. Optimisations de performance
4. Nouvelles fonctionnalités selon les besoins utilisateurs

---

**Statut du projet : PRODUCTION READY** ✅

===========================================
[Fin du cahier des charges] 

Mises à jour récentes :
- Correction et validation du système de favoris (étudiant) : fonctionnement dynamique et retour visuel OK.
- Correction de la modification de ressource pour enseignant : accès, édition, redirection et annulation OK.
- Vérification et correction de la cohérence des routes et des redirections (teacher_home). 